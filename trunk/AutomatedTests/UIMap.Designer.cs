// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 11.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace AutomatedTests
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// AddDogs - Use 'AddDogsParams' to pass parameters into this method.
        /// </summary>
        public void AddDogs()
        {
            #region Variable Declarations
            WpfEdit uICharacterSheetSearchEdit = this.UICombatManagerWindowWindow.UIItemTabList.UICreateTabPage.UICharacterSheetSearchEdit;
            WpfList uIAvailableNPCS_ListBoList = this.UICombatManagerWindowWindow.UIItemTabList.UICreateTabPage.UIAvailableNPCS_ListBoList;
            WpfCustom uIItemCustom = this.UICombatManagerWindowWindow.UIItemTabList.UICreateTabPage.UICreateText.UIItemCustom;
            WpfButton uIOKButton = this.UICombatManagerWindowWindow.UIItemTabList.UICreateTabPage.UIOKButton;
            WpfTabPage uICombatTabPage = this.UICombatManagerWindowWindow.UIItemTabList.UICombatTabPage;
            WpfImage uIItemImage = this.UICombatManagerWindowWindow.UIItemTabList.UICombatTabPage.UIActiveCharacters_LisList.UIDogListItem.UIDogText.UIItemImage;
            WpfCustom uIItemCustom1 = this.UICombatManagerWindowWindow.UIItemTabList.UICombatTabPage.UIRefill_Vitae_ButtonButton.UIItemCustom;
            #endregion

            // Type 'dog' in 'CharacterSheetSearcher_TextBox' text box
            uICharacterSheetSearchEdit.Text = this.AddDogsParams.UICharacterSheetSearchEditText;

            // Select 'Dog' in 'AvailableNPCS_ListBox' list box
            uIAvailableNPCS_ListBoList.SelectedItemsAsString = this.AddDogsParams.UIAvailableNPCS_ListBoListSelectedItemsAsString;

            // Last action on list item was not recorded because the control does not have any good identification property.

            // Last action on list item was not recorded because the control does not have any good identification property.

            // Click first custom control next to 'Create' label
            Mouse.Click(uIItemCustom, new Point(1028, 527));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(51, 19));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(51, 19));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(51, 19));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(51, 19));

            // Click 'Combat' tab
            Mouse.Click(uICombatTabPage, new Point(32, 9));

            // Click first image next to 'Dog' label
            Mouse.Click(uIItemImage, new Point(58, 46));

            // Double-Click first custom control next to 'Refill_Vitae_Button' button
            Mouse.DoubleClick(uIItemCustom1, new Point(271, 89));

            // Double-Click first custom control next to 'Refill_Vitae_Button' button
            Mouse.DoubleClick(uIItemCustom1, new Point(401, 88));

            // Double-Click first custom control next to 'Refill_Vitae_Button' button
            Mouse.DoubleClick(uIItemCustom1, new Point(339, 200));
        }
        
        /// <summary>
        /// DogPile - Use 'DogPileParams' to pass parameters into this method.
        /// </summary>
        public void DogPile()
        {
            #region Variable Declarations
            WpfEdit uICharacterSheetSearchEdit = this.UICombatManagerWindowWindow.UIItemTabList.UICreateTabPage.UICharacterSheetSearchEdit;
            WpfList uIAvailableNPCS_ListBoList = this.UICombatManagerWindowWindow.UIItemTabList.UICreateTabPage.UIAvailableNPCS_ListBoList;
            WpfEdit uIImageSearch_TextBoxEdit = this.UICombatManagerWindowWindow.UIItemTabList.UICreateTabPage.UIImageSearch_TextBoxEdit;
            WpfButton uIOKButton = this.UICombatManagerWindowWindow.UIItemTabList.UICreateTabPage.UIOKButton;
            WpfTabPage uICombatTabPage = this.UICombatManagerWindowWindow.UIItemTabList.UICombatTabPage;
            WpfImage uIItemImage = this.UICombatManagerWindowWindow.UIItemTabList.UICombatTabPage.UIActiveCharacters_LisList.UIDogListItem.UIDogText.UIItemImage;
            WpfButton uISelecttargetforselecButton = this.UICombatManagerWindowWindow.UIItemTabList.UICombatTabPage.UISelecttargetforselecButton;
            WpfList uIDamageType_ListBoxList = this.UISelectTargetWindow.UIDamageType_ListBoxList;
            WpfListItem uIAggrivatedListItem = this.UISelectTargetWindow.UIDamageType_ListBoxList.UIAggrivatedListItem;
            WpfButton uIAttack_Target_ButtonButton = this.UICombatManagerWindowWindow.UIItemTabList.UICombatTabPage.UIAttack_Target_ButtonButton;
            WpfButton uIResolveComposureButton = this.UICombatManagerWindowWindow.UIItemTabList.UICombatTabPage.UIResolveComposureButton;
            WpfButton uIResolveResistanceButton = this.UICombatManagerWindowWindow.UIItemTabList.UICombatTabPage.UIResolveResistanceButton;
            WpfButton uIComposureResistanceButton = this.UICombatManagerWindowWindow.UIItemTabList.UICombatTabPage.UIComposureResistanceButton;
            WpfButton uIAuto_Act_ButtonButton = this.UICombatManagerWindowWindow.UIItemTabList.UICombatTabPage.UIAuto_Act_ButtonButton;
            WpfButton uIDo_Aggrivated_ButtonButton = this.UICombatManagerWindowWindow.UIItemTabList.UICombatTabPage.UIDo_Aggrivated_ButtonButton;
            WpfButton uIReset_Health_ButtonButton = this.UICombatManagerWindowWindow.UIItemTabList.UICombatTabPage.UIReset_Health_ButtonButton;
            #endregion

            // Type 'dog' in 'CharacterSheetSearcher_TextBox' text box
            uICharacterSheetSearchEdit.Text = this.DogPileParams.UICharacterSheetSearchEditText;

            // Select 'Dog' in 'AvailableNPCS_ListBox' list box
            uIAvailableNPCS_ListBoList.SelectedItemsAsString = this.DogPileParams.UIAvailableNPCS_ListBoListSelectedItemsAsString;

            // Last action on list item was not recorded because the control does not have any good identification property.

            // Last action on list item was not recorded because the control does not have any good identification property.

            // Type 'dog2' in 'ImageSearch_TextBox' text box
            uIImageSearch_TextBoxEdit.Text = this.DogPileParams.UIImageSearch_TextBoxEditText;

            // Last action on list item was not recorded because the control does not have any good identification property.

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(24, 19));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(24, 19));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(24, 19));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(24, 18));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(24, 17));

            // Click 'Combat' tab
            Mouse.Click(uICombatTabPage, new Point(26, 14));

            // Click first image next to 'Dog' label
            Mouse.Click(uIItemImage, new Point(62, 28));

            // Click 'Select target for selected characters' button
            Mouse.Click(uISelecttargetforselecButton, new Point(15, 14));

            // Select 'Aggrivated' in 'DamageType_ListBox' list box
            uIDamageType_ListBoxList.SelectedItemsAsString = this.DogPileParams.UIDamageType_ListBoxListSelectedItemsAsString;

            // Type '{Enter}' in 'Aggrivated' list item
            Keyboard.SendKeys(uIAggrivatedListItem, this.DogPileParams.UIAggrivatedListItemSendKeys, ModifierKeys.None);

            // Click 'Attack_Target_Button' button
            Mouse.Click(uIAttack_Target_ButtonButton, new Point(15, 14));

            // Click 'Attack_Target_Button' button
            Mouse.Click(uIAttack_Target_ButtonButton, new Point(15, 14));

            // Click 'Attack_Target_Button' button
            Mouse.Click(uIAttack_Target_ButtonButton, new Point(15, 14));

            // Click 'Attack_Target_Button' button
            Mouse.Click(uIAttack_Target_ButtonButton, new Point(15, 14));

            // Click 'Attack_Target_Button' button
            Mouse.Click(uIAttack_Target_ButtonButton, new Point(15, 14));

            // Click 'Attack_Target_Button' button
            Mouse.Click(uIAttack_Target_ButtonButton, new Point(15, 14));

            // Click 'Attack_Target_Button' button
            Mouse.Click(uIAttack_Target_ButtonButton, new Point(13, 14));

            // Click 'Attack_Target_Button' button
            Mouse.Click(uIAttack_Target_ButtonButton, new Point(12, 14));

            // Click 'Attack_Target_Button' button
            Mouse.Click(uIAttack_Target_ButtonButton, new Point(9, 15));

            // Click 'Resolve Composure' button
            Mouse.Click(uIResolveComposureButton, new Point(40, 22));

            // Click 'Resolve Resistance' button
            Mouse.Click(uIResolveResistanceButton, new Point(22, 21));

            // Click 'Composure Resistance' button
            Mouse.Click(uIComposureResistanceButton, new Point(49, 17));

            // Click 'Auto_Act_Button' button
            Mouse.Click(uIAuto_Act_ButtonButton, new Point(8, 11));

            // Double-Click 'Auto_Act_Button' button
            Mouse.DoubleClick(uIAuto_Act_ButtonButton, new Point(8, 11));

            // Double-Click 'Auto_Act_Button' button
            Mouse.DoubleClick(uIAuto_Act_ButtonButton, new Point(8, 11));

            // Double-Click 'Auto_Act_Button' button
            Mouse.DoubleClick(uIAuto_Act_ButtonButton, new Point(8, 11));

            // Double-Click 'Auto_Act_Button' button
            Mouse.DoubleClick(uIAuto_Act_ButtonButton, new Point(8, 11));

            // Double-Click 'Auto_Act_Button' button
            Mouse.DoubleClick(uIAuto_Act_ButtonButton, new Point(8, 11));

            // Double-Click 'Auto_Act_Button' button
            Mouse.DoubleClick(uIAuto_Act_ButtonButton, new Point(8, 11));

            // Double-Click 'Do_Aggrivated_Button' button
            Mouse.DoubleClick(uIDo_Aggrivated_ButtonButton, new Point(9, 8));

            // Double-Click 'Do_Aggrivated_Button' button
            Mouse.DoubleClick(uIDo_Aggrivated_ButtonButton, new Point(9, 8));

            // Double-Click 'Do_Aggrivated_Button' button
            Mouse.DoubleClick(uIDo_Aggrivated_ButtonButton, new Point(9, 8));

            // Double-Click 'Do_Aggrivated_Button' button
            Mouse.DoubleClick(uIDo_Aggrivated_ButtonButton, new Point(9, 8));

            // Click 'Do_Aggrivated_Button' button
            Mouse.Click(uIDo_Aggrivated_ButtonButton, new Point(9, 8));

            // Click 'Reset_Health_Button' button
            Mouse.Click(uIReset_Health_ButtonButton, new Point(9, 12));
        }
        
        /// <summary>
        /// TrollsVersusSolar - Use 'TrollsVersusSolarParams' to pass parameters into this method.
        /// </summary>
        public void TrollsVersusSolar()
        {
            #region Variable Declarations
            WpfEdit uICharacterSheetSearchEdit = this.UICombatManagerWindowWindow.UIItemTabList.UICreateTabPage.UICharacterSheetSearchEdit;
            WpfButton uIOKButton = this.UICombatManagerWindowWindow.UIItemTabList.UICreateTabPage.UIOKButton;
            WpfTabPage uICombatTabPage = this.UICombatManagerWindowWindow.UIItemTabList.UICombatTabPage;
            WpfButton uIInitiative_ButtonButton = this.UICombatManagerWindowWindow.UIItemTabList.UICombatTabPage.UIInitiative_ButtonButton;
            WpfButton uIActivateNext_ButtonButton = this.UICombatManagerWindowWindow.UIItemTabList.UICombatTabPage.UIActivateNext_ButtonButton;
            WpfButton uIAuto_Act_ButtonButton = this.UICombatManagerWindowWindow.UIItemTabList.UICombatTabPage.UIAuto_Act_ButtonButton;
            #endregion

            // Type 'Solar' in 'CharacterSheetSearcher_TextBox' text box
            uICharacterSheetSearchEdit.Text = this.TrollsVersusSolarParams.UICharacterSheetSearchEditText;

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(40, 21));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(40, 21));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(40, 21));

            // Type 'Troll' in 'CharacterSheetSearcher_TextBox' text box
            uICharacterSheetSearchEdit.Text = this.TrollsVersusSolarParams.UICharacterSheetSearchEditText1;

            // Double-Click 'OK' button
            Mouse.DoubleClick(uIOKButton, new Point(41, 15));

            // Double-Click 'OK' button
            Mouse.DoubleClick(uIOKButton, new Point(41, 15));

            // Double-Click 'OK' button
            Mouse.DoubleClick(uIOKButton, new Point(41, 15));

            // Double-Click 'OK' button
            Mouse.DoubleClick(uIOKButton, new Point(41, 15));

            // Double-Click 'OK' button
            Mouse.DoubleClick(uIOKButton, new Point(41, 15));

            // Double-Click 'OK' button
            Mouse.DoubleClick(uIOKButton, new Point(41, 15));

            // Double-Click 'OK' button
            Mouse.DoubleClick(uIOKButton, new Point(41, 15));

            // Double-Click 'OK' button
            Mouse.DoubleClick(uIOKButton, new Point(41, 15));

            // Double-Click 'OK' button
            Mouse.DoubleClick(uIOKButton, new Point(41, 15));

            // Double-Click 'OK' button
            Mouse.DoubleClick(uIOKButton, new Point(41, 15));

            // Click 'Combat' tab
            Mouse.Click(uICombatTabPage, new Point(31, 7));

            // Click 'Initiative_Button' button
            Mouse.Click(uIInitiative_ButtonButton, new Point(14, 27));

            // Click 'ActivateNext_Button' button
            Mouse.Click(uIActivateNext_ButtonButton, new Point(16, 22));

            // Click 'Auto_Act_Button' button
            Mouse.Click(uIAuto_Act_ButtonButton, new Point(16, 14));

            // Click 'ActivateNext_Button' button
            Mouse.Click(uIActivateNext_ButtonButton, new Point(14, 17));

            // Click 'Auto_Act_Button' button
            Mouse.Click(uIAuto_Act_ButtonButton, new Point(19, 13));

            // Click 'ActivateNext_Button' button
            Mouse.Click(uIActivateNext_ButtonButton, new Point(21, 23));

            // Click 'Auto_Act_Button' button
            Mouse.Click(uIAuto_Act_ButtonButton, new Point(19, 13));

            // Click 'ActivateNext_Button' button
            Mouse.Click(uIActivateNext_ButtonButton, new Point(16, 22));

            // Click 'Auto_Act_Button' button
            Mouse.Click(uIAuto_Act_ButtonButton, new Point(23, 15));

            // Click 'ActivateNext_Button' button
            Mouse.Click(uIActivateNext_ButtonButton, new Point(21, 19));

            // Click 'Auto_Act_Button' button
            Mouse.Click(uIAuto_Act_ButtonButton, new Point(21, 17));

            // Click 'ActivateNext_Button' button
            Mouse.Click(uIActivateNext_ButtonButton, new Point(20, 22));

            // Click 'Auto_Act_Button' button
            Mouse.Click(uIAuto_Act_ButtonButton, new Point(29, 20));

            // Click 'ActivateNext_Button' button
            Mouse.Click(uIActivateNext_ButtonButton, new Point(19, 24));

            // Click 'Auto_Act_Button' button
            Mouse.Click(uIAuto_Act_ButtonButton, new Point(15, 19));

            // Click 'ActivateNext_Button' button
            Mouse.Click(uIActivateNext_ButtonButton, new Point(22, 17));

            // Click 'Auto_Act_Button' button
            Mouse.Click(uIAuto_Act_ButtonButton, new Point(17, 21));
        }
        
        /// <summary>
        /// TrollFight - Use 'TrollFightParams' to pass parameters into this method.
        /// </summary>
        public void TrollFight()
        {
            #region Variable Declarations
            WpfEdit uICharacterSheetSearchEdit = this.UICombatManagerWindowWindow.UIItemTabList.UICreateTabPage.UICharacterSheetSearchEdit;
            WpfButton uIOKButton = this.UICombatManagerWindowWindow.UIItemTabList.UICreateTabPage.UIOKButton;
            WpfTabPage uICombatTabPage = this.UICombatManagerWindowWindow.UIItemTabList.UICombatTabPage;
            WpfButton uIInitiative_ButtonButton = this.UICombatManagerWindowWindow.UIItemTabList.UICombatTabPage.UIInitiative_ButtonButton;
            WpfButton uIActivateNext_ButtonButton = this.UICombatManagerWindowWindow.UIItemTabList.UICombatTabPage.UIActivateNext_ButtonButton;
            WpfButton uIAuto_Act_ButtonButton = this.UICombatManagerWindowWindow.UIItemTabList.UICombatTabPage.UIAuto_Act_ButtonButton;
            WpfTabList uIItemTabList = this.UICombatManagerWindowWindow.UIItemTabList;
            WpfListItem uITroll_3ListItem = this.UICombatManagerWindowWindow.UIItemTabList.UICombatTabPage.UIActiveCharacters_LisList.UITroll_3ListItem;
            WpfList uIActiveCharacters_LisList = this.UICombatManagerWindowWindow.UIItemTabList.UICombatTabPage.UIActiveCharacters_LisList;
            WpfCustom uIItemCustom = this.UICombatManagerWindowWindow.UIItemTabList.UICombatTabPage.UIItemButton.UIItemCustom;
            #endregion

            // Type 'Troll' in 'CharacterSheetSearcher_TextBox' text box
            uICharacterSheetSearchEdit.Text = this.TrollFightParams.UICharacterSheetSearchEditText;

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(25, 12));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(25, 11));

            // Double-Click 'OK' button
            Mouse.DoubleClick(uIOKButton, new Point(25, 11));

            // Double-Click 'OK' button
            Mouse.DoubleClick(uIOKButton, new Point(25, 11));

            // Double-Click 'OK' button
            Mouse.DoubleClick(uIOKButton, new Point(25, 11));

            // Double-Click 'OK' button
            Mouse.DoubleClick(uIOKButton, new Point(25, 11));

            // Double-Click 'OK' button
            Mouse.DoubleClick(uIOKButton, new Point(25, 11));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(25, 11));

            // Double-Click 'OK' button
            Mouse.DoubleClick(uIOKButton, new Point(25, 11));

            // Click 'Combat' tab
            Mouse.Click(uICombatTabPage, new Point(34, 17));

            // Click 'Initiative_Button' button
            Mouse.Click(uIInitiative_ButtonButton, new Point(11, 19));

            // Click 'ActivateNext_Button' button
            Mouse.Click(uIActivateNext_ButtonButton, new Point(17, 23));

            // Click 'Auto_Act_Button' button
            Mouse.Click(uIAuto_Act_ButtonButton, new Point(10, 19));

            // Click 'ActivateNext_Button' button
            Mouse.Click(uIActivateNext_ButtonButton, new Point(26, 16));

            // Click 'Auto_Act_Button' button
            Mouse.Click(uIAuto_Act_ButtonButton, new Point(12, 17));

            // Click 'ActivateNext_Button' button
            Mouse.Click(uIActivateNext_ButtonButton, new Point(25, 15));

            // Click 'Auto_Act_Button' button
            Mouse.Click(uIAuto_Act_ButtonButton, new Point(14, 21));

            // Click 'ActivateNext_Button' button
            Mouse.Click(uIActivateNext_ButtonButton, new Point(20, 23));

            // Click 'Auto_Act_Button' button
            Mouse.Click(uIAuto_Act_ButtonButton, new Point(10, 14));

            // Click 'ActivateNext_Button' button
            Mouse.Click(uIActivateNext_ButtonButton, new Point(22, 12));

            // Click 'Auto_Act_Button' button
            Mouse.Click(uIAuto_Act_ButtonButton, new Point(17, 13));

            // Click 'ActivateNext_Button' button
            Mouse.Click(uIActivateNext_ButtonButton, new Point(23, 27));

            // Click 'Auto_Act_Button' button
            Mouse.Click(uIAuto_Act_ButtonButton, new Point(25, 22));

            // Click 'ActivateNext_Button' button
            Mouse.Click(uIActivateNext_ButtonButton, new Point(27, 28));

            // Click 'Auto_Act_Button' button
            Mouse.Click(uIAuto_Act_ButtonButton, new Point(18, 24));

            // Click 'ActivateNext_Button' button
            Mouse.Click(uIActivateNext_ButtonButton, new Point(14, 20));

            // Click 'Auto_Act_Button' button
            Mouse.Click(uIAuto_Act_ButtonButton, new Point(10, 17));

            // Click 'ActivateNext_Button' button
            Mouse.Click(uIActivateNext_ButtonButton, new Point(18, 16));

            // Click 'Auto_Act_Button' button
            Mouse.Click(uIAuto_Act_ButtonButton, new Point(20, 22));

            // Click 'ActivateNext_Button' button
            Mouse.Click(uIActivateNext_ButtonButton, new Point(18, 20));

            // Click 'Auto_Act_Button' button
            Mouse.Click(uIAuto_Act_ButtonButton, new Point(17, 21));

            // Click 'ActivateNext_Button' button
            Mouse.Click(uIActivateNext_ButtonButton, new Point(24, 18));

            // Click 'Auto_Act_Button' button
            Mouse.Click(uIAuto_Act_ButtonButton, new Point(18, 20));

            // Click 'ActivateNext_Button' button
            Mouse.Click(uIActivateNext_ButtonButton, new Point(30, 25));

            // Click 'Auto_Act_Button' button
            Mouse.Click(uIAuto_Act_ButtonButton, new Point(21, 18));

            // Click 'ActivateNext_Button' button
            Mouse.Click(uIActivateNext_ButtonButton, new Point(23, 28));

            // Click 'Auto_Act_Button' button
            Mouse.Click(uIAuto_Act_ButtonButton, new Point(15, 18));

            // Click 'ActivateNext_Button' button
            Mouse.Click(uIActivateNext_ButtonButton, new Point(21, 26));

            // Click 'Auto_Act_Button' button
            Mouse.Click(uIAuto_Act_ButtonButton, new Point(9, 8));

            // Click tab list
            Mouse.Click(uIItemTabList, new Point(81, 445));

            // Click 'ActivateNext_Button' button
            Mouse.Click(uIActivateNext_ButtonButton, new Point(8, 19));

            // Click 'Auto_Act_Button' button
            Mouse.Click(uIAuto_Act_ButtonButton, new Point(11, 15));

        }
        
        /// <summary>
        /// BattleOfTheClovi - Use 'BattleOfTheCloviParams' to pass parameters into this method.
        /// </summary>
        public void BattleOfTheClovi()
        {
            #region Variable Declarations
            WpfEdit uICharacterSheetSearchEdit = this.UICombatManagerWindowWindow.UIItemTabList.UICreateTabPage.UICharacterSheetSearchEdit;
            WpfListItem uIElderMeleeVampireListItem = this.UICombatManagerWindowWindow.UIItemCustom.UIAvailableNPCS_ListBoList.UIElderMeleeVampireListItem;
            WpfEdit uICharacterName_TextBoEdit = this.UICombatManagerWindowWindow.UIItemTabList.UICreateTabPage.UICharacterName_TextBoEdit;
            WpfEdit uIItemEdit = this.UICombatManagerWindowWindow.UIItemTabList.UICreateTabPage.UICharacterName_TextBoEdit.UIItemEdit;
            WpfEdit uIImageSearch_TextBoxEdit = this.UICombatManagerWindowWindow.UIItemTabList.UICreateTabPage.UIImageSearch_TextBoxEdit;
            WpfButton uIOKButton = this.UICombatManagerWindowWindow.UIItemTabList.UICreateTabPage.UIOKButton;
            WpfTabPage uICombatTabPage = this.UICombatManagerWindowWindow.UIItemTabList.UICombatTabPage;
            WpfButton uIInitiative_ButtonButton = this.UICombatManagerWindowWindow.UIItemTabList.UICombatTabPage.UIInitiative_ButtonButton;
            WpfButton uIActivateNext_ButtonButton = this.UICombatManagerWindowWindow.UIItemTabList.UICombatTabPage.UIActivateNext_ButtonButton;
            WinWindow uICombatManagerWindowWindow1 = this.UICombatManagerWindowWindow1;
            WpfButton uIBlood_Buff_ButtonButton = this.UICombatManagerWindowWindow.UIItemTabList.UICombatTabPage.UIBlood_Buff_ButtonButton;
            WpfButton uIBlood_Heal_ButtonButton = this.UICombatManagerWindowWindow.UIItemTabList.UICombatTabPage.UIBlood_Heal_ButtonButton;
            WpfButton uIAuto_Act_ButtonButton = this.UICombatManagerWindowWindow.UIItemTabList.UICombatTabPage.UIAuto_Act_ButtonButton;
            WpfButton uIRefill_Vitae_ButtonButton = this.UICombatManagerWindowWindow.UIItemTabList.UICombatTabPage.UIRefill_Vitae_ButtonButton;
            #endregion

            // Type 'elder melee' in 'CharacterSheetSearcher_TextBox' text box
            uICharacterSheetSearchEdit.Text = this.BattleOfTheCloviParams.UICharacterSheetSearchEditText;

            // Type '{Tab}' in 'CharacterSheetSearcher_TextBox' text box
            Keyboard.SendKeys(uICharacterSheetSearchEdit, this.BattleOfTheCloviParams.UICharacterSheetSearchEditSendKeys, ModifierKeys.None);

            // Type '{Tab}' in 'Elder Melee Vampire' list item
            Keyboard.SendKeys(uIElderMeleeVampireListItem, this.BattleOfTheCloviParams.UIElderMeleeVampireListItemSendKeys, ModifierKeys.None);

            // Type '{Tab}' in 'CharacterName_TextBox' text box
            Keyboard.SendKeys(uICharacterName_TextBoEdit, this.BattleOfTheCloviParams.UICharacterName_TextBoEditSendKeys, ModifierKeys.None);

            // Type '{Tab}' in first text box next to 'CharacterName_TextBox' text box
            Keyboard.SendKeys(uIItemEdit, this.BattleOfTheCloviParams.UIItemEditSendKeys, ModifierKeys.None);

            // Type 'Clovis' in 'ImageSearch_TextBox' text box
            uIImageSearch_TextBoxEdit.Text = this.BattleOfTheCloviParams.UIImageSearch_TextBoxEditText;

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(25, 16));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(26, 18));

            // Double-Click 'OK' button
            Mouse.DoubleClick(uIOKButton, new Point(26, 18));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(26, 18));

            // Click 'Combat' tab
            Mouse.Click(uICombatTabPage, new Point(27, 21));

            // Click 'Initiative_Button' button
            Mouse.Click(uIInitiative_ButtonButton, new Point(19, 26));

            // Click 'ActivateNext_Button' button
            Mouse.Click(uIActivateNext_ButtonButton, new Point(12, 22));

            // Click 'Combat Manager Window' window
            Mouse.Click(uICombatManagerWindowWindow1, new Point(1010, 6));

            // Click 'Blood_Buff_Button' button
            Mouse.Click(uIBlood_Buff_ButtonButton, new Point(20, 22));

            // Click 'Blood_Buff_Button' button
            Mouse.Click(uIBlood_Buff_ButtonButton, new Point(20, 21));

            // Click 'Blood_Heal_Button' button
            Mouse.Click(uIBlood_Heal_ButtonButton, new Point(27, 13));

            // Click 'Blood_Heal_Button' button
            Mouse.Click(uIBlood_Heal_ButtonButton, new Point(25, 13));

            // Click 'Auto_Act_Button' button
            Mouse.Click(uIAuto_Act_ButtonButton, new Point(18, 12));

            // Click 'Refill_Vitae_Button' button
            Mouse.Click(uIRefill_Vitae_ButtonButton, new Point(20, 26));

            // Click 'ActivateNext_Button' button
            Mouse.Click(uIActivateNext_ButtonButton, new Point(25, 19));

            // Click 'Blood_Buff_Button' button
            Mouse.Click(uIBlood_Buff_ButtonButton, new Point(17, 20));

            // Click 'Blood_Buff_Button' button
            Mouse.Click(uIBlood_Buff_ButtonButton, new Point(17, 20));

            // Click 'Blood_Heal_Button' button
            Mouse.Click(uIBlood_Heal_ButtonButton, new Point(16, 22));

            // Click 'Blood_Heal_Button' button
            Mouse.Click(uIBlood_Heal_ButtonButton, new Point(17, 21));

            // Click 'Refill_Vitae_Button' button
            Mouse.Click(uIRefill_Vitae_ButtonButton, new Point(12, 17));

            // Click 'Auto_Act_Button' button
            Mouse.Click(uIAuto_Act_ButtonButton, new Point(19, 14));

            // Click 'ActivateNext_Button' button
            Mouse.Click(uIActivateNext_ButtonButton, new Point(19, 14));

            // Click 'Blood_Buff_Button' button
            Mouse.Click(uIBlood_Buff_ButtonButton, new Point(15, 11));

            // Click 'Blood_Buff_Button' button
            Mouse.Click(uIBlood_Buff_ButtonButton, new Point(19, 16));

            // Click 'Blood_Heal_Button' button
            Mouse.Click(uIBlood_Heal_ButtonButton, new Point(13, 21));

            // Click 'Blood_Heal_Button' button
            Mouse.Click(uIBlood_Heal_ButtonButton, new Point(24, 20));

            // Click 'Refill_Vitae_Button' button
            Mouse.Click(uIRefill_Vitae_ButtonButton, new Point(16, 17));

            // Click 'Auto_Act_Button' button
            Mouse.Click(uIAuto_Act_ButtonButton, new Point(16, 20));

            // Click 'ActivateNext_Button' button
            Mouse.Click(uIActivateNext_ButtonButton, new Point(13, 18));

            // Click 'Blood_Buff_Button' button
            Mouse.Click(uIBlood_Buff_ButtonButton, new Point(10, 12));

            // Click 'Blood_Buff_Button' button
            Mouse.Click(uIBlood_Buff_ButtonButton, new Point(17, 15));

            // Click 'Blood_Heal_Button' button
            Mouse.Click(uIBlood_Heal_ButtonButton, new Point(19, 15));

            // Click 'Blood_Heal_Button' button
            Mouse.Click(uIBlood_Heal_ButtonButton, new Point(19, 15));

            // Click 'Refill_Vitae_Button' button
            Mouse.Click(uIRefill_Vitae_ButtonButton, new Point(22, 20));

            // Click 'Auto_Act_Button' button
            Mouse.Click(uIAuto_Act_ButtonButton, new Point(15, 17));

            // Click 'ActivateNext_Button' button
            Mouse.Click(uIActivateNext_ButtonButton, new Point(23, 20));

            // Click 'Blood_Buff_Button' button
            Mouse.Click(uIBlood_Buff_ButtonButton, new Point(13, 22));

            // Click 'Blood_Buff_Button' button
            Mouse.Click(uIBlood_Buff_ButtonButton, new Point(16, 19));

            // Click 'Blood_Heal_Button' button
            Mouse.Click(uIBlood_Heal_ButtonButton, new Point(12, 19));

            // Click 'Blood_Heal_Button' button
            Mouse.Click(uIBlood_Heal_ButtonButton, new Point(10, 20));

            // Click 'Refill_Vitae_Button' button
            Mouse.Click(uIRefill_Vitae_ButtonButton, new Point(16, 19));

            // Click 'Auto_Act_Button' button
            Mouse.Click(uIAuto_Act_ButtonButton, new Point(24, 13));
        }
    
        
        #region Properties
        public virtual AddDogsParams AddDogsParams
        {
            get
            {
                if ((this.mAddDogsParams == null))
                {
                    this.mAddDogsParams = new AddDogsParams();
                }
                return this.mAddDogsParams;
            }
        }
        
        public virtual DogPileParams DogPileParams
        {
            get
            {
                if ((this.mDogPileParams == null))
                {
                    this.mDogPileParams = new DogPileParams();
                }
                return this.mDogPileParams;
            }
        }
        
        public virtual TrollsVersusSolarParams TrollsVersusSolarParams
        {
            get
            {
                if ((this.mTrollsVersusSolarParams == null))
                {
                    this.mTrollsVersusSolarParams = new TrollsVersusSolarParams();
                }
                return this.mTrollsVersusSolarParams;
            }
        }
        
        public virtual TrollFightParams TrollFightParams
        {
            get
            {
                if ((this.mTrollFightParams == null))
                {
                    this.mTrollFightParams = new TrollFightParams();
                }
                return this.mTrollFightParams;
            }
        }
        
        public virtual BattleOfTheCloviParams BattleOfTheCloviParams
        {
            get
            {
                if ((this.mBattleOfTheCloviParams == null))
                {
                    this.mBattleOfTheCloviParams = new BattleOfTheCloviParams();
                }
                return this.mBattleOfTheCloviParams;
            }
        }
        
        public virtual KillSomeOozesParams KillSomeOozesParams
        {
            get
            {
                if ((this.mKillSomeOozesParams == null))
                {
                    this.mKillSomeOozesParams = new KillSomeOozesParams();
                }
                return this.mKillSomeOozesParams;
            }
        }
        
        public UICombatManagerWindowWindow UICombatManagerWindowWindow
        {
            get
            {
                if ((this.mUICombatManagerWindowWindow == null))
                {
                    this.mUICombatManagerWindowWindow = new UICombatManagerWindowWindow();
                }
                return this.mUICombatManagerWindowWindow;
            }
        }
        
        public UISelectTargetWindow UISelectTargetWindow
        {
            get
            {
                if ((this.mUISelectTargetWindow == null))
                {
                    this.mUISelectTargetWindow = new UISelectTargetWindow();
                }
                return this.mUISelectTargetWindow;
            }
        }
        
        public UICombatManagerWindowWindow1 UICombatManagerWindowWindow1
        {
            get
            {
                if ((this.mUICombatManagerWindowWindow1 == null))
                {
                    this.mUICombatManagerWindowWindow1 = new UICombatManagerWindowWindow1();
                }
                return this.mUICombatManagerWindowWindow1;
            }
        }
        
        public UIWpfWindow UIWpfWindow
        {
            get
            {
                if ((this.mUIWpfWindow == null))
                {
                    this.mUIWpfWindow = new UIWpfWindow();
                }
                return this.mUIWpfWindow;
            }
        }
        #endregion
        
        #region Fields
        private AddDogsParams mAddDogsParams;
        
        private DogPileParams mDogPileParams;
        
        private TrollsVersusSolarParams mTrollsVersusSolarParams;
        
        private TrollFightParams mTrollFightParams;
        
        private BattleOfTheCloviParams mBattleOfTheCloviParams;
        
        private KillSomeOozesParams mKillSomeOozesParams;
        
        private UICombatManagerWindowWindow mUICombatManagerWindowWindow;
        
        private UISelectTargetWindow mUISelectTargetWindow;
        
        private UICombatManagerWindowWindow1 mUICombatManagerWindowWindow1;
        
        private UIWpfWindow mUIWpfWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddDogs'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AddDogsParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'dog' in 'CharacterSheetSearcher_TextBox' text box
        /// </summary>
        public string UICharacterSheetSearchEditText = "dog";
        
        /// <summary>
        /// Select 'Dog' in 'AvailableNPCS_ListBox' list box
        /// </summary>
        public string UIAvailableNPCS_ListBoListSelectedItemsAsString = "Dog";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'DogPile'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class DogPileParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'dog' in 'CharacterSheetSearcher_TextBox' text box
        /// </summary>
        public string UICharacterSheetSearchEditText = "dog";
        
        /// <summary>
        /// Select 'Dog' in 'AvailableNPCS_ListBox' list box
        /// </summary>
        public string UIAvailableNPCS_ListBoListSelectedItemsAsString = "Dog";
        
        /// <summary>
        /// Type 'dog2' in 'ImageSearch_TextBox' text box
        /// </summary>
        public string UIImageSearch_TextBoxEditText = "dog2";
        
        /// <summary>
        /// Select 'Aggrivated' in 'DamageType_ListBox' list box
        /// </summary>
        public string UIDamageType_ListBoxListSelectedItemsAsString = "Aggrivated";
        
        /// <summary>
        /// Type '{Enter}' in 'Aggrivated' list item
        /// </summary>
        public string UIAggrivatedListItemSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TrollsVersusSolar'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class TrollsVersusSolarParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Solar' in 'CharacterSheetSearcher_TextBox' text box
        /// </summary>
        public string UICharacterSheetSearchEditText = "Solar";
        
        /// <summary>
        /// Type 'Troll' in 'CharacterSheetSearcher_TextBox' text box
        /// </summary>
        public string UICharacterSheetSearchEditText1 = "Troll";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TrollFight'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class TrollFightParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Troll' in 'CharacterSheetSearcher_TextBox' text box
        /// </summary>
        public string UICharacterSheetSearchEditText = "Troll";
        
        /// <summary>
        /// Select 'Troll_4,Troll_14,Troll_6,Troll_8,Troll_5,Troll_7,Troll_10,Troll_9,Troll_12,Troll_11,Troll_1,Troll_2,Troll_13,Troll,Troll_3' in 'ActiveCharacters_ListBox' list box
        /// </summary>
        public string UIActiveCharacters_LisListSelectedItemsAsString = "Troll_4,Troll_14,Troll_6,Troll_8,Troll_5,Troll_7,Troll_10,Troll_9,Troll_12,Troll_" +
            "11,Troll_1,Troll_2,Troll_13,Troll,Troll_3";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'BattleOfTheClovi'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class BattleOfTheCloviParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'elder melee' in 'CharacterSheetSearcher_TextBox' text box
        /// </summary>
        public string UICharacterSheetSearchEditText = "elder melee";
        
        /// <summary>
        /// Type '{Tab}' in 'CharacterSheetSearcher_TextBox' text box
        /// </summary>
        public string UICharacterSheetSearchEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '{Tab}' in 'Elder Melee Vampire' list item
        /// </summary>
        public string UIElderMeleeVampireListItemSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '{Tab}' in 'CharacterName_TextBox' text box
        /// </summary>
        public string UICharacterName_TextBoEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '{Tab}' in first text box next to 'CharacterName_TextBox' text box
        /// </summary>
        public string UIItemEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type 'Clovis' in 'ImageSearch_TextBox' text box
        /// </summary>
        public string UIImageSearch_TextBoxEditText = "Clovis";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'KillSomeOozes'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class KillSomeOozesParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Ooze' in 'CharacterSheetSearcher_TextBox' text box
        /// </summary>
        public string UICharacterSheetSearchEditText = "Ooze";
        
        /// <summary>
        /// Type '{Tab}' in 'CharacterSheetSearcher_TextBox' text box
        /// </summary>
        public string UICharacterSheetSearchEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '{Tab}' in 'Gray Ooze' list item
        /// </summary>
        public string UIGrayOozeListItemSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '{Tab}' in 'CharacterName_TextBox' text box
        /// </summary>
        public string UICharacterName_TextBoEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '{Tab}' in first text box next to 'CharacterName_TextBox' text box
        /// </summary>
        public string UIItemEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '{Tab}' in 'ImageSearch_TextBox' text box
        /// </summary>
        public string UIImageSearch_TextBoxEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '{Tab}' in 'CombatAutomationTheater.PictureFileInfo' list item
        /// </summary>
        public string UICombatAutomationTheaterPictureListItemSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}' in 'OK' button
        /// </summary>
        public string UIOKButtonSendKeys = "{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}{Enter}";
        
        /// <summary>
        /// Type '500' in '50' cell
        /// </summary>
        public string UIItem50CellValue = "500";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Select 'Gray Ooze,Gray Ooze_1,Gray Ooze_2,Gray Ooze_3,Gray Ooze_4,Gray Ooze_5,Gray Ooze_6,Gray Ooze_7,Gray Ooze_8,Gray Ooze_9' in 'ActiveCharacters_ListBox' list box
        /// </summary>
        public string UIActiveCharacters_LisListSelectedItemsAsString = "Gray Ooze,Gray Ooze_1,Gray Ooze_2,Gray Ooze_3,Gray Ooze_4,Gray Ooze_5,Gray Ooze_6" +
            ",Gray Ooze_7,Gray Ooze_8,Gray Ooze_9";
        
        /// <summary>
        /// Type '99' in 'DC_TextBox' text box
        /// </summary>
        public string UIDC_TextBoxEditText = "99";
        
        /// <summary>
        /// Type '150' in 'Damage_TextBox' text box
        /// </summary>
        public string UIDamage_TextBoxEditText = "150";
        
        /// <summary>
        /// Select 'Gray Ooze_9,Gray Ooze_8,Gray Ooze_7,Gray Ooze_6,Gray Ooze_5,Gray Ooze_3,Gray Ooze_2,Gray Ooze_1,Gray Ooze' in 'DeceasedCharacters' list box
        /// </summary>
        public string UIDeceasedCharactersListSelectedItemsAsString = "Gray Ooze_9,Gray Ooze_8,Gray Ooze_7,Gray Ooze_6,Gray Ooze_5,Gray Ooze_3,Gray Ooze" +
            "_2,Gray Ooze_1,Gray Ooze";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICombatManagerWindowWindow : WpfWindow
    {
        
        public UICombatManagerWindowWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Combat Manager Window";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Combat Manager Window");
            #endregion
        }
        
        #region Properties
        public UIItemTabList UIItemTabList
        {
            get
            {
                if ((this.mUIItemTabList == null))
                {
                    this.mUIItemTabList = new UIItemTabList(this);
                }
                return this.mUIItemTabList;
            }
        }
        
        public UIItemCustom UIItemCustom
        {
            get
            {
                if ((this.mUIItemCustom == null))
                {
                    this.mUIItemCustom = new UIItemCustom(this);
                }
                return this.mUIItemCustom;
            }
        }
        
        public UIItemMenu UIItemMenu
        {
            get
            {
                if ((this.mUIItemMenu == null))
                {
                    this.mUIItemMenu = new UIItemMenu(this);
                }
                return this.mUIItemMenu;
            }
        }
        #endregion
        
        #region Fields
        private UIItemTabList mUIItemTabList;
        
        private UIItemCustom mUIItemCustom;
        
        private UIItemMenu mUIItemMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemTabList : WpfTabList
    {
        
        public UIItemTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Combat Manager Window");
            #endregion
        }
        
        #region Properties
        public UICreateTabPage UICreateTabPage
        {
            get
            {
                if ((this.mUICreateTabPage == null))
                {
                    this.mUICreateTabPage = new UICreateTabPage(this);
                }
                return this.mUICreateTabPage;
            }
        }
        
        public UICombatTabPage UICombatTabPage
        {
            get
            {
                if ((this.mUICombatTabPage == null))
                {
                    this.mUICombatTabPage = new UICombatTabPage(this);
                }
                return this.mUICombatTabPage;
            }
        }
        
        public UICurrentCharacterTabPage UICurrentCharacterTabPage
        {
            get
            {
                if ((this.mUICurrentCharacterTabPage == null))
                {
                    this.mUICurrentCharacterTabPage = new UICurrentCharacterTabPage(this);
                }
                return this.mUICurrentCharacterTabPage;
            }
        }
        
        public UIDeceasedTabPage UIDeceasedTabPage
        {
            get
            {
                if ((this.mUIDeceasedTabPage == null))
                {
                    this.mUIDeceasedTabPage = new UIDeceasedTabPage(this);
                }
                return this.mUIDeceasedTabPage;
            }
        }
        #endregion
        
        #region Fields
        private UICreateTabPage mUICreateTabPage;
        
        private UICombatTabPage mUICombatTabPage;
        
        private UICurrentCharacterTabPage mUICurrentCharacterTabPage;
        
        private UIDeceasedTabPage mUIDeceasedTabPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICreateTabPage : WpfTabPage
    {
        
        public UICreateTabPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.AutomationId] = "CreationTab";
            this.WindowTitles.Add("Combat Manager Window");
            #endregion
        }
        
        #region Properties
        public WpfEdit UICharacterSheetSearchEdit
        {
            get
            {
                if ((this.mUICharacterSheetSearchEdit == null))
                {
                    this.mUICharacterSheetSearchEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUICharacterSheetSearchEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "CharacterSheetSearcher_TextBox";
                    this.mUICharacterSheetSearchEdit.WindowTitles.Add("Combat Manager Window");
                    #endregion
                }
                return this.mUICharacterSheetSearchEdit;
            }
        }
        
        public WpfList UIAvailableNPCS_ListBoList
        {
            get
            {
                if ((this.mUIAvailableNPCS_ListBoList == null))
                {
                    this.mUIAvailableNPCS_ListBoList = new WpfList(this);
                    #region Search Criteria
                    this.mUIAvailableNPCS_ListBoList.SearchProperties[WpfList.PropertyNames.AutomationId] = "AvailableNPCS_ListBox";
                    this.mUIAvailableNPCS_ListBoList.WindowTitles.Add("Combat Manager Window");
                    #endregion
                }
                return this.mUIAvailableNPCS_ListBoList;
            }
        }
        
        public UICreateText UICreateText
        {
            get
            {
                if ((this.mUICreateText == null))
                {
                    this.mUICreateText = new UICreateText(this);
                }
                return this.mUICreateText;
            }
        }
        
        public WpfButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WpfButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Combat Manager Window");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        
        public WpfEdit UIImageSearch_TextBoxEdit
        {
            get
            {
                if ((this.mUIImageSearch_TextBoxEdit == null))
                {
                    this.mUIImageSearch_TextBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIImageSearch_TextBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "ImageSearch_TextBox";
                    this.mUIImageSearch_TextBoxEdit.WindowTitles.Add("Combat Manager Window");
                    #endregion
                }
                return this.mUIImageSearch_TextBoxEdit;
            }
        }
        
        public UICharacterName_TextBoEdit UICharacterName_TextBoEdit
        {
            get
            {
                if ((this.mUICharacterName_TextBoEdit == null))
                {
                    this.mUICharacterName_TextBoEdit = new UICharacterName_TextBoEdit(this);
                }
                return this.mUICharacterName_TextBoEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUICharacterSheetSearchEdit;
        
        private WpfList mUIAvailableNPCS_ListBoList;
        
        private UICreateText mUICreateText;
        
        private WpfButton mUIOKButton;
        
        private WpfEdit mUIImageSearch_TextBoxEdit;
        
        private UICharacterName_TextBoEdit mUICharacterName_TextBoEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICreateText : WpfText
    {
        
        public UICreateText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Name] = "Create";
            this.WindowTitles.Add("Combat Manager Window");
            #endregion
        }
        
        #region Properties
        public WpfCustom UIItemCustom
        {
            get
            {
                if ((this.mUIItemCustom == null))
                {
                    this.mUIItemCustom = new WpfCustom(this);
                    #region Search Criteria
                    this.mUIItemCustom.SearchProperties[UITestControl.PropertyNames.ClassName] = "Uia.CharacterCreationControl";
                    this.mUIItemCustom.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIItemCustom.WindowTitles.Add("Combat Manager Window");
                    #endregion
                }
                return this.mUIItemCustom;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mUIItemCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICharacterName_TextBoEdit : WpfEdit
    {
        
        public UICharacterName_TextBoEdit(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "CharacterName_TextBox";
            this.WindowTitles.Add("Combat Manager Window");
            #endregion
        }
        
        #region Properties
        public WpfEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIItemEdit.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mUIItemEdit.WindowTitles.Add("Combat Manager Window");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICombatTabPage : WpfTabPage
    {
        
        public UICombatTabPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.AutomationId] = "MainTab";
            this.WindowTitles.Add("Combat Manager Window");
            #endregion
        }
        
        #region Properties
        public UIActiveCharacters_LisList UIActiveCharacters_LisList
        {
            get
            {
                if ((this.mUIActiveCharacters_LisList == null))
                {
                    this.mUIActiveCharacters_LisList = new UIActiveCharacters_LisList(this);
                }
                return this.mUIActiveCharacters_LisList;
            }
        }
        
        public UIRefill_Vitae_ButtonButton UIRefill_Vitae_ButtonButton
        {
            get
            {
                if ((this.mUIRefill_Vitae_ButtonButton == null))
                {
                    this.mUIRefill_Vitae_ButtonButton = new UIRefill_Vitae_ButtonButton(this);
                }
                return this.mUIRefill_Vitae_ButtonButton;
            }
        }
        
        public WpfButton UISelecttargetforselecButton
        {
            get
            {
                if ((this.mUISelecttargetforselecButton == null))
                {
                    this.mUISelecttargetforselecButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUISelecttargetforselecButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Select target for selected characters";
                    this.mUISelecttargetforselecButton.WindowTitles.Add("Combat Manager Window");
                    #endregion
                }
                return this.mUISelecttargetforselecButton;
            }
        }
        
        public WpfButton UIAttack_Target_ButtonButton
        {
            get
            {
                if ((this.mUIAttack_Target_ButtonButton == null))
                {
                    this.mUIAttack_Target_ButtonButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIAttack_Target_ButtonButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Attack_Target_Button";
                    this.mUIAttack_Target_ButtonButton.WindowTitles.Add("Combat Manager Window");
                    #endregion
                }
                return this.mUIAttack_Target_ButtonButton;
            }
        }
        
        public WpfButton UIResolveComposureButton
        {
            get
            {
                if ((this.mUIResolveComposureButton == null))
                {
                    this.mUIResolveComposureButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIResolveComposureButton.SearchProperties[WpfButton.PropertyNames.Name] = "Resolve\r\nComposure";
                    this.mUIResolveComposureButton.WindowTitles.Add("Combat Manager Window");
                    #endregion
                }
                return this.mUIResolveComposureButton;
            }
        }
        
        public WpfButton UIResolveResistanceButton
        {
            get
            {
                if ((this.mUIResolveResistanceButton == null))
                {
                    this.mUIResolveResistanceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIResolveResistanceButton.SearchProperties[WpfButton.PropertyNames.Name] = "Resolve\r\nResistance";
                    this.mUIResolveResistanceButton.WindowTitles.Add("Combat Manager Window");
                    #endregion
                }
                return this.mUIResolveResistanceButton;
            }
        }
        
        public WpfButton UIComposureResistanceButton
        {
            get
            {
                if ((this.mUIComposureResistanceButton == null))
                {
                    this.mUIComposureResistanceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIComposureResistanceButton.SearchProperties[WpfButton.PropertyNames.Name] = "Composure\r\nResistance";
                    this.mUIComposureResistanceButton.WindowTitles.Add("Combat Manager Window");
                    #endregion
                }
                return this.mUIComposureResistanceButton;
            }
        }
        
        public WpfButton UIAuto_Act_ButtonButton
        {
            get
            {
                if ((this.mUIAuto_Act_ButtonButton == null))
                {
                    this.mUIAuto_Act_ButtonButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIAuto_Act_ButtonButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Auto_Act_Button";
                    this.mUIAuto_Act_ButtonButton.WindowTitles.Add("Combat Manager Window");
                    #endregion
                }
                return this.mUIAuto_Act_ButtonButton;
            }
        }
        
        public WpfButton UIDo_Aggrivated_ButtonButton
        {
            get
            {
                if ((this.mUIDo_Aggrivated_ButtonButton == null))
                {
                    this.mUIDo_Aggrivated_ButtonButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIDo_Aggrivated_ButtonButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Do_Aggrivated_Button";
                    this.mUIDo_Aggrivated_ButtonButton.WindowTitles.Add("Combat Manager Window");
                    #endregion
                }
                return this.mUIDo_Aggrivated_ButtonButton;
            }
        }
        
        public WpfButton UIReset_Health_ButtonButton
        {
            get
            {
                if ((this.mUIReset_Health_ButtonButton == null))
                {
                    this.mUIReset_Health_ButtonButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIReset_Health_ButtonButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Reset_Health_Button";
                    this.mUIReset_Health_ButtonButton.WindowTitles.Add("Combat Manager Window");
                    #endregion
                }
                return this.mUIReset_Health_ButtonButton;
            }
        }
        
        public WpfButton UIInitiative_ButtonButton
        {
            get
            {
                if ((this.mUIInitiative_ButtonButton == null))
                {
                    this.mUIInitiative_ButtonButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIInitiative_ButtonButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Initiative_Button";
                    this.mUIInitiative_ButtonButton.WindowTitles.Add("Combat Manager Window");
                    #endregion
                }
                return this.mUIInitiative_ButtonButton;
            }
        }
        
        public WpfButton UIActivateNext_ButtonButton
        {
            get
            {
                if ((this.mUIActivateNext_ButtonButton == null))
                {
                    this.mUIActivateNext_ButtonButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIActivateNext_ButtonButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ActivateNext_Button";
                    this.mUIActivateNext_ButtonButton.WindowTitles.Add("Combat Manager Window");
                    #endregion
                }
                return this.mUIActivateNext_ButtonButton;
            }
        }
        
        public UIItemButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new UIItemButton(this);
                }
                return this.mUIItemButton;
            }
        }
        
        public WpfButton UIBlood_Buff_ButtonButton
        {
            get
            {
                if ((this.mUIBlood_Buff_ButtonButton == null))
                {
                    this.mUIBlood_Buff_ButtonButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIBlood_Buff_ButtonButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Blood_Buff_Button";
                    this.mUIBlood_Buff_ButtonButton.WindowTitles.Add("Combat Manager Window");
                    #endregion
                }
                return this.mUIBlood_Buff_ButtonButton;
            }
        }
        
        public WpfButton UIBlood_Heal_ButtonButton
        {
            get
            {
                if ((this.mUIBlood_Heal_ButtonButton == null))
                {
                    this.mUIBlood_Heal_ButtonButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIBlood_Heal_ButtonButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Blood_Heal_Button";
                    this.mUIBlood_Heal_ButtonButton.WindowTitles.Add("Combat Manager Window");
                    #endregion
                }
                return this.mUIBlood_Heal_ButtonButton;
            }
        }
        
        public WpfEdit UIDamageValue_SelectAlEdit
        {
            get
            {
                if ((this.mUIDamageValue_SelectAlEdit == null))
                {
                    this.mUIDamageValue_SelectAlEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIDamageValue_SelectAlEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "DamageValue_SelectAllTextBox";
                    this.mUIDamageValue_SelectAlEdit.WindowTitles.Add("Combat Manager Window");
                    #endregion
                }
                return this.mUIDamageValue_SelectAlEdit;
            }
        }
        
        public WpfButton UIApplyastatuseffectorButton
        {
            get
            {
                if ((this.mUIApplyastatuseffectorButton == null))
                {
                    this.mUIApplyastatuseffectorButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIApplyastatuseffectorButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Apply a status effect or damage to all selected characters";
                    this.mUIApplyastatuseffectorButton.WindowTitles.Add("Combat Manager Window");
                    #endregion
                }
                return this.mUIApplyastatuseffectorButton;
            }
        }
        #endregion
        
        #region Fields
        private UIActiveCharacters_LisList mUIActiveCharacters_LisList;
        
        private UIRefill_Vitae_ButtonButton mUIRefill_Vitae_ButtonButton;
        
        private WpfButton mUISelecttargetforselecButton;
        
        private WpfButton mUIAttack_Target_ButtonButton;
        
        private WpfButton mUIResolveComposureButton;
        
        private WpfButton mUIResolveResistanceButton;
        
        private WpfButton mUIComposureResistanceButton;
        
        private WpfButton mUIAuto_Act_ButtonButton;
        
        private WpfButton mUIDo_Aggrivated_ButtonButton;
        
        private WpfButton mUIReset_Health_ButtonButton;
        
        private WpfButton mUIInitiative_ButtonButton;
        
        private WpfButton mUIActivateNext_ButtonButton;
        
        private UIItemButton mUIItemButton;
        
        private WpfButton mUIBlood_Buff_ButtonButton;
        
        private WpfButton mUIBlood_Heal_ButtonButton;
        
        private WpfEdit mUIDamageValue_SelectAlEdit;
        
        private WpfButton mUIApplyastatuseffectorButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIActiveCharacters_LisList : WpfList
    {
        
        public UIActiveCharacters_LisList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfList.PropertyNames.AutomationId] = "ActiveCharacters_ListBox";
            this.WindowTitles.Add("Combat Manager Window");
            #endregion
        }
        
        #region Properties
        public UIDogListItem UIDogListItem
        {
            get
            {
                if ((this.mUIDogListItem == null))
                {
                    this.mUIDogListItem = new UIDogListItem(this);
                }
                return this.mUIDogListItem;
            }
        }
        
        public WpfListItem UITroll_3ListItem
        {
            get
            {
                if ((this.mUITroll_3ListItem == null))
                {
                    this.mUITroll_3ListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mUITroll_3ListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "Troll_3";
                    this.mUITroll_3ListItem.WindowTitles.Add("Combat Manager Window");
                    #endregion
                }
                return this.mUITroll_3ListItem;
            }
        }
        
        public UIGrayOozeListItem UIGrayOozeListItem
        {
            get
            {
                if ((this.mUIGrayOozeListItem == null))
                {
                    this.mUIGrayOozeListItem = new UIGrayOozeListItem(this);
                }
                return this.mUIGrayOozeListItem;
            }
        }
        
        public UIGrayOoze_4ListItem UIGrayOoze_4ListItem
        {
            get
            {
                if ((this.mUIGrayOoze_4ListItem == null))
                {
                    this.mUIGrayOoze_4ListItem = new UIGrayOoze_4ListItem(this);
                }
                return this.mUIGrayOoze_4ListItem;
            }
        }
        
        public WpfListItem UIGrayOoze_6ListItem
        {
            get
            {
                if ((this.mUIGrayOoze_6ListItem == null))
                {
                    this.mUIGrayOoze_6ListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIGrayOoze_6ListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "Gray Ooze_6";
                    this.mUIGrayOoze_6ListItem.WindowTitles.Add("Combat Manager Window");
                    #endregion
                }
                return this.mUIGrayOoze_6ListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIDogListItem mUIDogListItem;
        
        private WpfListItem mUITroll_3ListItem;
        
        private UIGrayOozeListItem mUIGrayOozeListItem;
        
        private UIGrayOoze_4ListItem mUIGrayOoze_4ListItem;
        
        private WpfListItem mUIGrayOoze_6ListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIDogListItem : WpfListItem
    {
        
        public UIDogListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Dog";
            this.WindowTitles.Add("Combat Manager Window");
            #endregion
        }
        
        #region Properties
        public UIDogText UIDogText
        {
            get
            {
                if ((this.mUIDogText == null))
                {
                    this.mUIDogText = new UIDogText(this);
                }
                return this.mUIDogText;
            }
        }
        #endregion
        
        #region Fields
        private UIDogText mUIDogText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIDogText : WpfText
    {
        
        public UIDogText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Name] = "Dog";
            this.WindowTitles.Add("Combat Manager Window");
            #endregion
        }
        
        #region Properties
        public WpfImage UIItemImage
        {
            get
            {
                if ((this.mUIItemImage == null))
                {
                    this.mUIItemImage = new WpfImage(this);
                    #region Search Criteria
                    this.mUIItemImage.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIItemImage.WindowTitles.Add("Combat Manager Window");
                    #endregion
                }
                return this.mUIItemImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mUIItemImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIGrayOozeListItem : WpfListItem
    {
        
        public UIGrayOozeListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Gray Ooze";
            this.WindowTitles.Add("Combat Manager Window");
            #endregion
        }
        
        #region Properties
        public UIGrayOozeText UIGrayOozeText
        {
            get
            {
                if ((this.mUIGrayOozeText == null))
                {
                    this.mUIGrayOozeText = new UIGrayOozeText(this);
                }
                return this.mUIGrayOozeText;
            }
        }
        #endregion
        
        #region Fields
        private UIGrayOozeText mUIGrayOozeText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIGrayOozeText : WpfText
    {
        
        public UIGrayOozeText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Name] = "Gray Ooze";
            this.WindowTitles.Add("Combat Manager Window");
            #endregion
        }
        
        #region Properties
        public WpfImage UIItemImage
        {
            get
            {
                if ((this.mUIItemImage == null))
                {
                    this.mUIItemImage = new WpfImage(this);
                    #region Search Criteria
                    this.mUIItemImage.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIItemImage.WindowTitles.Add("Combat Manager Window");
                    #endregion
                }
                return this.mUIItemImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mUIItemImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIGrayOoze_4ListItem : WpfListItem
    {
        
        public UIGrayOoze_4ListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Gray Ooze_4";
            this.WindowTitles.Add("Combat Manager Window");
            #endregion
        }
        
        #region Properties
        public UIGrayOoze_4Text UIGrayOoze_4Text
        {
            get
            {
                if ((this.mUIGrayOoze_4Text == null))
                {
                    this.mUIGrayOoze_4Text = new UIGrayOoze_4Text(this);
                }
                return this.mUIGrayOoze_4Text;
            }
        }
        #endregion
        
        #region Fields
        private UIGrayOoze_4Text mUIGrayOoze_4Text;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIGrayOoze_4Text : WpfText
    {
        
        public UIGrayOoze_4Text(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Name] = "Gray Ooze_4";
            this.WindowTitles.Add("Combat Manager Window");
            #endregion
        }
        
        #region Properties
        public WpfImage UIItemImage
        {
            get
            {
                if ((this.mUIItemImage == null))
                {
                    this.mUIItemImage = new WpfImage(this);
                    #region Search Criteria
                    this.mUIItemImage.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIItemImage.WindowTitles.Add("Combat Manager Window");
                    #endregion
                }
                return this.mUIItemImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mUIItemImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIRefill_Vitae_ButtonButton : WpfButton
    {
        
        public UIRefill_Vitae_ButtonButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Refill_Vitae_Button";
            this.WindowTitles.Add("Combat Manager Window");
            #endregion
        }
        
        #region Properties
        public WpfCustom UIItemCustom
        {
            get
            {
                if ((this.mUIItemCustom == null))
                {
                    this.mUIItemCustom = new WpfCustom(this);
                    #region Search Criteria
                    this.mUIItemCustom.SearchProperties[UITestControl.PropertyNames.ClassName] = "Uia.Viewport3D";
                    this.mUIItemCustom.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIItemCustom.WindowTitles.Add("Combat Manager Window");
                    #endregion
                }
                return this.mUIItemCustom;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mUIItemCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemButton : WpfButton
    {
        
        public UIItemButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.Name] = ">";
            this.WindowTitles.Add("Combat Manager Window");
            #endregion
        }
        
        #region Properties
        public WpfCustom UIItemCustom
        {
            get
            {
                if ((this.mUIItemCustom == null))
                {
                    this.mUIItemCustom = new WpfCustom(this);
                    #region Search Criteria
                    this.mUIItemCustom.SearchProperties[UITestControl.PropertyNames.ClassName] = "Uia.Viewport3D";
                    this.mUIItemCustom.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIItemCustom.WindowTitles.Add("Combat Manager Window");
                    #endregion
                }
                return this.mUIItemCustom;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mUIItemCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICurrentCharacterTabPage : WpfTabPage
    {
        
        public UICurrentCharacterTabPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.AutomationId] = "CurrentCharacterControlTab";
            this.WindowTitles.Add("Combat Manager Window");
            #endregion
        }
        
        #region Properties
        public UIItemTable UIItemTable
        {
            get
            {
                if ((this.mUIItemTable == null))
                {
                    this.mUIItemTable = new UIItemTable(this);
                }
                return this.mUIItemTable;
            }
        }
        #endregion
        
        #region Fields
        private UIItemTable mUIItemTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemTable : WpfTable
    {
        
        public UIItemTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Combat Manager Window");
            #endregion
        }
        
        #region Properties
        public UIVigor50Row UIVigor50Row
        {
            get
            {
                if ((this.mUIVigor50Row == null))
                {
                    this.mUIVigor50Row = new UIVigor50Row(this);
                }
                return this.mUIVigor50Row;
            }
        }
        #endregion
        
        #region Fields
        private UIVigor50Row mUIVigor50Row;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIVigor50Row : WpfRow
    {
        
        public UIVigor50Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.Name] = "Vigor 50";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Combat Manager Window");
            #endregion
        }
        
        #region Properties
        public UIItem50Cell UIItem50Cell
        {
            get
            {
                if ((this.mUIItem50Cell == null))
                {
                    this.mUIItem50Cell = new UIItem50Cell(this);
                }
                return this.mUIItem50Cell;
            }
        }
        #endregion
        
        #region Fields
        private UIItem50Cell mUIItem50Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItem50Cell : WpfCell
    {
        
        public UIItem50Cell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "BaseTraitContents";
            this.WindowTitles.Add("Combat Manager Window");
            #endregion
        }
        
        #region Properties
        public WpfEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Combat Manager Window");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIDeceasedTabPage : WpfTabPage
    {
        
        public UIDeceasedTabPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "Deceased";
            this.WindowTitles.Add("Combat Manager Window");
            #endregion
        }
        
        #region Properties
        public WpfList UIDeceasedCharactersList
        {
            get
            {
                if ((this.mUIDeceasedCharactersList == null))
                {
                    this.mUIDeceasedCharactersList = new WpfList(this);
                    #region Search Criteria
                    this.mUIDeceasedCharactersList.SearchProperties[WpfList.PropertyNames.AutomationId] = "DeceasedCharacters";
                    this.mUIDeceasedCharactersList.WindowTitles.Add("Combat Manager Window");
                    #endregion
                }
                return this.mUIDeceasedCharactersList;
            }
        }
        
        public WpfButton UIRestoreButton
        {
            get
            {
                if ((this.mUIRestoreButton == null))
                {
                    this.mUIRestoreButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIRestoreButton.SearchProperties[WpfButton.PropertyNames.Name] = "Restore";
                    this.mUIRestoreButton.WindowTitles.Add("Combat Manager Window");
                    #endregion
                }
                return this.mUIRestoreButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfList mUIDeceasedCharactersList;
        
        private WpfButton mUIRestoreButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemCustom : WpfCustom
    {
        
        public UIItemCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "Uia.CharacterCreationControl";
            this.WindowTitles.Add("Combat Manager Window");
            #endregion
        }
        
        #region Properties
        public UIAvailableNPCS_ListBoList UIAvailableNPCS_ListBoList
        {
            get
            {
                if ((this.mUIAvailableNPCS_ListBoList == null))
                {
                    this.mUIAvailableNPCS_ListBoList = new UIAvailableNPCS_ListBoList(this);
                }
                return this.mUIAvailableNPCS_ListBoList;
            }
        }
        
        public UIPictureSearch_ListBoList UIPictureSearch_ListBoList
        {
            get
            {
                if ((this.mUIPictureSearch_ListBoList == null))
                {
                    this.mUIPictureSearch_ListBoList = new UIPictureSearch_ListBoList(this);
                }
                return this.mUIPictureSearch_ListBoList;
            }
        }
        #endregion
        
        #region Fields
        private UIAvailableNPCS_ListBoList mUIAvailableNPCS_ListBoList;
        
        private UIPictureSearch_ListBoList mUIPictureSearch_ListBoList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIAvailableNPCS_ListBoList : WpfList
    {
        
        public UIAvailableNPCS_ListBoList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfList.PropertyNames.AutomationId] = "AvailableNPCS_ListBox";
            this.WindowTitles.Add("Combat Manager Window");
            #endregion
        }
        
        #region Properties
        public WpfListItem UIElderMeleeVampireListItem
        {
            get
            {
                if ((this.mUIElderMeleeVampireListItem == null))
                {
                    this.mUIElderMeleeVampireListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIElderMeleeVampireListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "Elder Melee Vampire";
                    this.mUIElderMeleeVampireListItem.WindowTitles.Add("Combat Manager Window");
                    #endregion
                }
                return this.mUIElderMeleeVampireListItem;
            }
        }
        
        public WpfListItem UIGrayOozeListItem
        {
            get
            {
                if ((this.mUIGrayOozeListItem == null))
                {
                    this.mUIGrayOozeListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIGrayOozeListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "Gray Ooze";
                    this.mUIGrayOozeListItem.WindowTitles.Add("Combat Manager Window");
                    #endregion
                }
                return this.mUIGrayOozeListItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mUIElderMeleeVampireListItem;
        
        private WpfListItem mUIGrayOozeListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIPictureSearch_ListBoList : WpfList
    {
        
        public UIPictureSearch_ListBoList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfList.PropertyNames.AutomationId] = "PictureSearch_ListBox";
            this.WindowTitles.Add("Combat Manager Window");
            #endregion
        }
        
        #region Properties
        public WpfListItem UICombatAutomationTheaterPictureListItem
        {
            get
            {
                if ((this.mUICombatAutomationTheaterPictureListItem == null))
                {
                    this.mUICombatAutomationTheaterPictureListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mUICombatAutomationTheaterPictureListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "CombatAutomationTheater.PictureFileInfo";
                    this.mUICombatAutomationTheaterPictureListItem.WindowTitles.Add("Combat Manager Window");
                    #endregion
                }
                return this.mUICombatAutomationTheaterPictureListItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mUICombatAutomationTheaterPictureListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemMenu : WpfMenu
    {
        
        public UIItemMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfMenu.PropertyNames.ClassName] = "Uia.ContextMenu";
            this.WindowTitles.Add("Combat Manager Window");
            #endregion
        }
        
        #region Properties
        public WpfMenuItem UICleandeceasedcharactMenuItem
        {
            get
            {
                if ((this.mUICleandeceasedcharactMenuItem == null))
                {
                    this.mUICleandeceasedcharactMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mUICleandeceasedcharactMenuItem.SearchProperties[WpfMenuItem.PropertyNames.Name] = "Clean deceased characters";
                    this.mUICleandeceasedcharactMenuItem.WindowTitles.Add("Combat Manager Window");
                    #endregion
                }
                return this.mUICleandeceasedcharactMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfMenuItem mUICleandeceasedcharactMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UISelectTargetWindow : WpfWindow
    {
        
        public UISelectTargetWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Select Target";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Select Target");
            #endregion
        }
        
        #region Properties
        public UIDamageType_ListBoxList UIDamageType_ListBoxList
        {
            get
            {
                if ((this.mUIDamageType_ListBoxList == null))
                {
                    this.mUIDamageType_ListBoxList = new UIDamageType_ListBoxList(this);
                }
                return this.mUIDamageType_ListBoxList;
            }
        }
        #endregion
        
        #region Fields
        private UIDamageType_ListBoxList mUIDamageType_ListBoxList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIDamageType_ListBoxList : WpfList
    {
        
        public UIDamageType_ListBoxList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfList.PropertyNames.AutomationId] = "DamageType_ListBox";
            this.WindowTitles.Add("Select Target");
            #endregion
        }
        
        #region Properties
        public WpfListItem UIAggrivatedListItem
        {
            get
            {
                if ((this.mUIAggrivatedListItem == null))
                {
                    this.mUIAggrivatedListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIAggrivatedListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "Aggrivated";
                    this.mUIAggrivatedListItem.WindowTitles.Add("Select Target");
                    #endregion
                }
                return this.mUIAggrivatedListItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mUIAggrivatedListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICombatManagerWindowWindow1 : WinWindow
    {
        
        public UICombatManagerWindowWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Combat Manager Window";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Combat Manager Window");
            #endregion
        }
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIWpfWindow : WpfWindow
    {
        
        public UIWpfWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public WpfEdit UIDC_TextBoxEdit
        {
            get
            {
                if ((this.mUIDC_TextBoxEdit == null))
                {
                    this.mUIDC_TextBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIDC_TextBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "DC_TextBox";
                    #endregion
                }
                return this.mUIDC_TextBoxEdit;
            }
        }
        
        public WpfEdit UIDamage_TextBoxEdit
        {
            get
            {
                if ((this.mUIDamage_TextBoxEdit == null))
                {
                    this.mUIDamage_TextBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIDamage_TextBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Damage_TextBox";
                    #endregion
                }
                return this.mUIDamage_TextBoxEdit;
            }
        }
        
        public WpfButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WpfButton.PropertyNames.Name] = "OK";
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUIDC_TextBoxEdit;
        
        private WpfEdit mUIDamage_TextBoxEdit;
        
        private WpfButton mUIOKButton;
        #endregion
    }
}
